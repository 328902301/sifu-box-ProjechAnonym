// Code generated by ent, DO NOT EDIT.

package provider

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the provider type in the database.
	Label = "provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldDetour holds the string denoting the detour field in the database.
	FieldDetour = "detour"
	// FieldRemote holds the string denoting the remote field in the database.
	FieldRemote = "remote"
	// Table holds the table name of the provider in the database.
	Table = "providers"
)

// Columns holds all SQL columns for provider fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPath,
	FieldDetour,
	FieldRemote,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// DetourValidator is a validator for the "detour" field. It is called by the builders before save.
	DetourValidator func(string) error
)

// OrderOption defines the ordering options for the Provider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByDetour orders the results by the detour field.
func ByDetour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetour, opts...).ToFunc()
}

// ByRemote orders the results by the remote field.
func ByRemote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemote, opts...).ToFunc()
}
