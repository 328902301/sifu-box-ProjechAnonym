// Code generated by ent, DO NOT EDIT.

package provider

import (
	"sifu-box/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldName, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldPath, v))
}

// Detour applies equality check predicate on the "detour" field. It's identical to DetourEQ.
func Detour(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldDetour, v))
}

// Remote applies equality check predicate on the "remote" field. It's identical to RemoteEQ.
func Remote(v bool) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldRemote, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContainsFold(FieldName, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContainsFold(FieldPath, v))
}

// DetourEQ applies the EQ predicate on the "detour" field.
func DetourEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldDetour, v))
}

// DetourNEQ applies the NEQ predicate on the "detour" field.
func DetourNEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldDetour, v))
}

// DetourIn applies the In predicate on the "detour" field.
func DetourIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldDetour, vs...))
}

// DetourNotIn applies the NotIn predicate on the "detour" field.
func DetourNotIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldDetour, vs...))
}

// DetourGT applies the GT predicate on the "detour" field.
func DetourGT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldDetour, v))
}

// DetourGTE applies the GTE predicate on the "detour" field.
func DetourGTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldDetour, v))
}

// DetourLT applies the LT predicate on the "detour" field.
func DetourLT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldDetour, v))
}

// DetourLTE applies the LTE predicate on the "detour" field.
func DetourLTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldDetour, v))
}

// DetourContains applies the Contains predicate on the "detour" field.
func DetourContains(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContains(FieldDetour, v))
}

// DetourHasPrefix applies the HasPrefix predicate on the "detour" field.
func DetourHasPrefix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasPrefix(FieldDetour, v))
}

// DetourHasSuffix applies the HasSuffix predicate on the "detour" field.
func DetourHasSuffix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasSuffix(FieldDetour, v))
}

// DetourIsNil applies the IsNil predicate on the "detour" field.
func DetourIsNil() predicate.Provider {
	return predicate.Provider(sql.FieldIsNull(FieldDetour))
}

// DetourNotNil applies the NotNil predicate on the "detour" field.
func DetourNotNil() predicate.Provider {
	return predicate.Provider(sql.FieldNotNull(FieldDetour))
}

// DetourEqualFold applies the EqualFold predicate on the "detour" field.
func DetourEqualFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEqualFold(FieldDetour, v))
}

// DetourContainsFold applies the ContainsFold predicate on the "detour" field.
func DetourContainsFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContainsFold(FieldDetour, v))
}

// RemoteEQ applies the EQ predicate on the "remote" field.
func RemoteEQ(v bool) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldRemote, v))
}

// RemoteNEQ applies the NEQ predicate on the "remote" field.
func RemoteNEQ(v bool) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldRemote, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Provider) predicate.Provider {
	return predicate.Provider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Provider) predicate.Provider {
	return predicate.Provider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Provider) predicate.Provider {
	return predicate.Provider(sql.NotPredicates(p))
}
