// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sifu-box/ent/predicate"
	"sifu-box/ent/ruleset"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleSetUpdate is the builder for updating RuleSet entities.
type RuleSetUpdate struct {
	config
	hooks    []Hook
	mutation *RuleSetMutation
}

// Where appends a list predicates to the RuleSetUpdate builder.
func (rsu *RuleSetUpdate) Where(ps ...predicate.RuleSet) *RuleSetUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetTag sets the "tag" field.
func (rsu *RuleSetUpdate) SetTag(s string) *RuleSetUpdate {
	rsu.mutation.SetTag(s)
	return rsu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableTag(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetTag(*s)
	}
	return rsu
}

// SetType sets the "type" field.
func (rsu *RuleSetUpdate) SetType(s string) *RuleSetUpdate {
	rsu.mutation.SetType(s)
	return rsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableType(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetType(*s)
	}
	return rsu
}

// SetPath sets the "path" field.
func (rsu *RuleSetUpdate) SetPath(s string) *RuleSetUpdate {
	rsu.mutation.SetPath(s)
	return rsu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillablePath(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetPath(*s)
	}
	return rsu
}

// SetFormat sets the "format" field.
func (rsu *RuleSetUpdate) SetFormat(s string) *RuleSetUpdate {
	rsu.mutation.SetFormat(s)
	return rsu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableFormat(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetFormat(*s)
	}
	return rsu
}

// SetLabel sets the "label" field.
func (rsu *RuleSetUpdate) SetLabel(s string) *RuleSetUpdate {
	rsu.mutation.SetLabel(s)
	return rsu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableLabel(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetLabel(*s)
	}
	return rsu
}

// SetDownloadDetour sets the "download_detour" field.
func (rsu *RuleSetUpdate) SetDownloadDetour(s string) *RuleSetUpdate {
	rsu.mutation.SetDownloadDetour(s)
	return rsu
}

// SetNillableDownloadDetour sets the "download_detour" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableDownloadDetour(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetDownloadDetour(*s)
	}
	return rsu
}

// ClearDownloadDetour clears the value of the "download_detour" field.
func (rsu *RuleSetUpdate) ClearDownloadDetour() *RuleSetUpdate {
	rsu.mutation.ClearDownloadDetour()
	return rsu
}

// SetUpdateInterval sets the "update_interval" field.
func (rsu *RuleSetUpdate) SetUpdateInterval(s string) *RuleSetUpdate {
	rsu.mutation.SetUpdateInterval(s)
	return rsu
}

// SetNillableUpdateInterval sets the "update_interval" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableUpdateInterval(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetUpdateInterval(*s)
	}
	return rsu
}

// ClearUpdateInterval clears the value of the "update_interval" field.
func (rsu *RuleSetUpdate) ClearUpdateInterval() *RuleSetUpdate {
	rsu.mutation.ClearUpdateInterval()
	return rsu
}

// SetNameServer sets the "name_server" field.
func (rsu *RuleSetUpdate) SetNameServer(s string) *RuleSetUpdate {
	rsu.mutation.SetNameServer(s)
	return rsu
}

// SetNillableNameServer sets the "name_server" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableNameServer(s *string) *RuleSetUpdate {
	if s != nil {
		rsu.SetNameServer(*s)
	}
	return rsu
}

// ClearNameServer clears the value of the "name_server" field.
func (rsu *RuleSetUpdate) ClearNameServer() *RuleSetUpdate {
	rsu.mutation.ClearNameServer()
	return rsu
}

// SetChina sets the "china" field.
func (rsu *RuleSetUpdate) SetChina(b bool) *RuleSetUpdate {
	rsu.mutation.SetChina(b)
	return rsu
}

// SetNillableChina sets the "china" field if the given value is not nil.
func (rsu *RuleSetUpdate) SetNillableChina(b *bool) *RuleSetUpdate {
	if b != nil {
		rsu.SetChina(*b)
	}
	return rsu
}

// Mutation returns the RuleSetMutation object of the builder.
func (rsu *RuleSetUpdate) Mutation() *RuleSetMutation {
	return rsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *RuleSetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rsu.sqlSave, rsu.mutation, rsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *RuleSetUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *RuleSetUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *RuleSetUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsu *RuleSetUpdate) check() error {
	if v, ok := rsu.mutation.Tag(); ok {
		if err := ruleset.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "RuleSet.tag": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.GetType(); ok {
		if err := ruleset.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RuleSet.type": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.Path(); ok {
		if err := ruleset.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "RuleSet.path": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.Format(); ok {
		if err := ruleset.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "RuleSet.format": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.Label(); ok {
		if err := ruleset.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "RuleSet.label": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.DownloadDetour(); ok {
		if err := ruleset.DownloadDetourValidator(v); err != nil {
			return &ValidationError{Name: "download_detour", err: fmt.Errorf(`ent: validator failed for field "RuleSet.download_detour": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.UpdateInterval(); ok {
		if err := ruleset.UpdateIntervalValidator(v); err != nil {
			return &ValidationError{Name: "update_interval", err: fmt.Errorf(`ent: validator failed for field "RuleSet.update_interval": %w`, err)}
		}
	}
	if v, ok := rsu.mutation.NameServer(); ok {
		if err := ruleset.NameServerValidator(v); err != nil {
			return &ValidationError{Name: "name_server", err: fmt.Errorf(`ent: validator failed for field "RuleSet.name_server": %w`, err)}
		}
	}
	return nil
}

func (rsu *RuleSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ruleset.Table, ruleset.Columns, sqlgraph.NewFieldSpec(ruleset.FieldID, field.TypeInt))
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.Tag(); ok {
		_spec.SetField(ruleset.FieldTag, field.TypeString, value)
	}
	if value, ok := rsu.mutation.GetType(); ok {
		_spec.SetField(ruleset.FieldType, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Path(); ok {
		_spec.SetField(ruleset.FieldPath, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Format(); ok {
		_spec.SetField(ruleset.FieldFormat, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Label(); ok {
		_spec.SetField(ruleset.FieldLabel, field.TypeString, value)
	}
	if value, ok := rsu.mutation.DownloadDetour(); ok {
		_spec.SetField(ruleset.FieldDownloadDetour, field.TypeString, value)
	}
	if rsu.mutation.DownloadDetourCleared() {
		_spec.ClearField(ruleset.FieldDownloadDetour, field.TypeString)
	}
	if value, ok := rsu.mutation.UpdateInterval(); ok {
		_spec.SetField(ruleset.FieldUpdateInterval, field.TypeString, value)
	}
	if rsu.mutation.UpdateIntervalCleared() {
		_spec.ClearField(ruleset.FieldUpdateInterval, field.TypeString)
	}
	if value, ok := rsu.mutation.NameServer(); ok {
		_spec.SetField(ruleset.FieldNameServer, field.TypeString, value)
	}
	if rsu.mutation.NameServerCleared() {
		_spec.ClearField(ruleset.FieldNameServer, field.TypeString)
	}
	if value, ok := rsu.mutation.China(); ok {
		_spec.SetField(ruleset.FieldChina, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruleset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsu.mutation.done = true
	return n, nil
}

// RuleSetUpdateOne is the builder for updating a single RuleSet entity.
type RuleSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RuleSetMutation
}

// SetTag sets the "tag" field.
func (rsuo *RuleSetUpdateOne) SetTag(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetTag(s)
	return rsuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableTag(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetTag(*s)
	}
	return rsuo
}

// SetType sets the "type" field.
func (rsuo *RuleSetUpdateOne) SetType(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetType(s)
	return rsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableType(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetType(*s)
	}
	return rsuo
}

// SetPath sets the "path" field.
func (rsuo *RuleSetUpdateOne) SetPath(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetPath(s)
	return rsuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillablePath(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetPath(*s)
	}
	return rsuo
}

// SetFormat sets the "format" field.
func (rsuo *RuleSetUpdateOne) SetFormat(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetFormat(s)
	return rsuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableFormat(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetFormat(*s)
	}
	return rsuo
}

// SetLabel sets the "label" field.
func (rsuo *RuleSetUpdateOne) SetLabel(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetLabel(s)
	return rsuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableLabel(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetLabel(*s)
	}
	return rsuo
}

// SetDownloadDetour sets the "download_detour" field.
func (rsuo *RuleSetUpdateOne) SetDownloadDetour(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetDownloadDetour(s)
	return rsuo
}

// SetNillableDownloadDetour sets the "download_detour" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableDownloadDetour(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetDownloadDetour(*s)
	}
	return rsuo
}

// ClearDownloadDetour clears the value of the "download_detour" field.
func (rsuo *RuleSetUpdateOne) ClearDownloadDetour() *RuleSetUpdateOne {
	rsuo.mutation.ClearDownloadDetour()
	return rsuo
}

// SetUpdateInterval sets the "update_interval" field.
func (rsuo *RuleSetUpdateOne) SetUpdateInterval(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetUpdateInterval(s)
	return rsuo
}

// SetNillableUpdateInterval sets the "update_interval" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableUpdateInterval(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetUpdateInterval(*s)
	}
	return rsuo
}

// ClearUpdateInterval clears the value of the "update_interval" field.
func (rsuo *RuleSetUpdateOne) ClearUpdateInterval() *RuleSetUpdateOne {
	rsuo.mutation.ClearUpdateInterval()
	return rsuo
}

// SetNameServer sets the "name_server" field.
func (rsuo *RuleSetUpdateOne) SetNameServer(s string) *RuleSetUpdateOne {
	rsuo.mutation.SetNameServer(s)
	return rsuo
}

// SetNillableNameServer sets the "name_server" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableNameServer(s *string) *RuleSetUpdateOne {
	if s != nil {
		rsuo.SetNameServer(*s)
	}
	return rsuo
}

// ClearNameServer clears the value of the "name_server" field.
func (rsuo *RuleSetUpdateOne) ClearNameServer() *RuleSetUpdateOne {
	rsuo.mutation.ClearNameServer()
	return rsuo
}

// SetChina sets the "china" field.
func (rsuo *RuleSetUpdateOne) SetChina(b bool) *RuleSetUpdateOne {
	rsuo.mutation.SetChina(b)
	return rsuo
}

// SetNillableChina sets the "china" field if the given value is not nil.
func (rsuo *RuleSetUpdateOne) SetNillableChina(b *bool) *RuleSetUpdateOne {
	if b != nil {
		rsuo.SetChina(*b)
	}
	return rsuo
}

// Mutation returns the RuleSetMutation object of the builder.
func (rsuo *RuleSetUpdateOne) Mutation() *RuleSetMutation {
	return rsuo.mutation
}

// Where appends a list predicates to the RuleSetUpdate builder.
func (rsuo *RuleSetUpdateOne) Where(ps ...predicate.RuleSet) *RuleSetUpdateOne {
	rsuo.mutation.Where(ps...)
	return rsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *RuleSetUpdateOne) Select(field string, fields ...string) *RuleSetUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated RuleSet entity.
func (rsuo *RuleSetUpdateOne) Save(ctx context.Context) (*RuleSet, error) {
	return withHooks(ctx, rsuo.sqlSave, rsuo.mutation, rsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *RuleSetUpdateOne) SaveX(ctx context.Context) *RuleSet {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *RuleSetUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *RuleSetUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuo *RuleSetUpdateOne) check() error {
	if v, ok := rsuo.mutation.Tag(); ok {
		if err := ruleset.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "RuleSet.tag": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.GetType(); ok {
		if err := ruleset.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RuleSet.type": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.Path(); ok {
		if err := ruleset.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "RuleSet.path": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.Format(); ok {
		if err := ruleset.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "RuleSet.format": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.Label(); ok {
		if err := ruleset.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "RuleSet.label": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.DownloadDetour(); ok {
		if err := ruleset.DownloadDetourValidator(v); err != nil {
			return &ValidationError{Name: "download_detour", err: fmt.Errorf(`ent: validator failed for field "RuleSet.download_detour": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.UpdateInterval(); ok {
		if err := ruleset.UpdateIntervalValidator(v); err != nil {
			return &ValidationError{Name: "update_interval", err: fmt.Errorf(`ent: validator failed for field "RuleSet.update_interval": %w`, err)}
		}
	}
	if v, ok := rsuo.mutation.NameServer(); ok {
		if err := ruleset.NameServerValidator(v); err != nil {
			return &ValidationError{Name: "name_server", err: fmt.Errorf(`ent: validator failed for field "RuleSet.name_server": %w`, err)}
		}
	}
	return nil
}

func (rsuo *RuleSetUpdateOne) sqlSave(ctx context.Context) (_node *RuleSet, err error) {
	if err := rsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ruleset.Table, ruleset.Columns, sqlgraph.NewFieldSpec(ruleset.FieldID, field.TypeInt))
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RuleSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ruleset.FieldID)
		for _, f := range fields {
			if !ruleset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ruleset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.Tag(); ok {
		_spec.SetField(ruleset.FieldTag, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.GetType(); ok {
		_spec.SetField(ruleset.FieldType, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Path(); ok {
		_spec.SetField(ruleset.FieldPath, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Format(); ok {
		_spec.SetField(ruleset.FieldFormat, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Label(); ok {
		_spec.SetField(ruleset.FieldLabel, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.DownloadDetour(); ok {
		_spec.SetField(ruleset.FieldDownloadDetour, field.TypeString, value)
	}
	if rsuo.mutation.DownloadDetourCleared() {
		_spec.ClearField(ruleset.FieldDownloadDetour, field.TypeString)
	}
	if value, ok := rsuo.mutation.UpdateInterval(); ok {
		_spec.SetField(ruleset.FieldUpdateInterval, field.TypeString, value)
	}
	if rsuo.mutation.UpdateIntervalCleared() {
		_spec.ClearField(ruleset.FieldUpdateInterval, field.TypeString)
	}
	if value, ok := rsuo.mutation.NameServer(); ok {
		_spec.SetField(ruleset.FieldNameServer, field.TypeString, value)
	}
	if rsuo.mutation.NameServerCleared() {
		_spec.ClearField(ruleset.FieldNameServer, field.TypeString)
	}
	if value, ok := rsuo.mutation.China(); ok {
		_spec.SetField(ruleset.FieldChina, field.TypeBool, value)
	}
	_node = &RuleSet{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruleset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuo.mutation.done = true
	return _node, nil
}
