// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sifu-box/ent/predicate"
	"sifu-box/ent/provider"
	"sifu-box/ent/ruleset"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProvider = "Provider"
	TypeRuleSet  = "RuleSet"
)

// ProviderMutation represents an operation that mutates the Provider nodes in the graph.
type ProviderMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	_path         *string
	detour        *string
	remote        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Provider, error)
	predicates    []predicate.Provider
}

var _ ent.Mutation = (*ProviderMutation)(nil)

// providerOption allows management of the mutation configuration using functional options.
type providerOption func(*ProviderMutation)

// newProviderMutation creates new mutation for the Provider entity.
func newProviderMutation(c config, op Op, opts ...providerOption) *ProviderMutation {
	m := &ProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProviderID sets the ID field of the mutation.
func withProviderID(id int) providerOption {
	return func(m *ProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *Provider
		)
		m.oldValue = func(ctx context.Context) (*Provider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Provider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvider sets the old Provider of the mutation.
func withProvider(node *Provider) providerOption {
	return func(m *ProviderMutation) {
		m.oldValue = func(context.Context) (*Provider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProviderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProviderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Provider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProviderMutation) ResetName() {
	m.name = nil
}

// SetPath sets the "path" field.
func (m *ProviderMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ProviderMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *ProviderMutation) ResetPath() {
	m._path = nil
}

// SetDetour sets the "detour" field.
func (m *ProviderMutation) SetDetour(s string) {
	m.detour = &s
}

// Detour returns the value of the "detour" field in the mutation.
func (m *ProviderMutation) Detour() (r string, exists bool) {
	v := m.detour
	if v == nil {
		return
	}
	return *v, true
}

// OldDetour returns the old "detour" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldDetour(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetour is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetour requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetour: %w", err)
	}
	return oldValue.Detour, nil
}

// ClearDetour clears the value of the "detour" field.
func (m *ProviderMutation) ClearDetour() {
	m.detour = nil
	m.clearedFields[provider.FieldDetour] = struct{}{}
}

// DetourCleared returns if the "detour" field was cleared in this mutation.
func (m *ProviderMutation) DetourCleared() bool {
	_, ok := m.clearedFields[provider.FieldDetour]
	return ok
}

// ResetDetour resets all changes to the "detour" field.
func (m *ProviderMutation) ResetDetour() {
	m.detour = nil
	delete(m.clearedFields, provider.FieldDetour)
}

// SetRemote sets the "remote" field.
func (m *ProviderMutation) SetRemote(b bool) {
	m.remote = &b
}

// Remote returns the value of the "remote" field in the mutation.
func (m *ProviderMutation) Remote() (r bool, exists bool) {
	v := m.remote
	if v == nil {
		return
	}
	return *v, true
}

// OldRemote returns the old "remote" field's value of the Provider entity.
// If the Provider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProviderMutation) OldRemote(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemote: %w", err)
	}
	return oldValue.Remote, nil
}

// ResetRemote resets all changes to the "remote" field.
func (m *ProviderMutation) ResetRemote() {
	m.remote = nil
}

// Where appends a list predicates to the ProviderMutation builder.
func (m *ProviderMutation) Where(ps ...predicate.Provider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Provider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Provider).
func (m *ProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProviderMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, provider.FieldName)
	}
	if m._path != nil {
		fields = append(fields, provider.FieldPath)
	}
	if m.detour != nil {
		fields = append(fields, provider.FieldDetour)
	}
	if m.remote != nil {
		fields = append(fields, provider.FieldRemote)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case provider.FieldName:
		return m.Name()
	case provider.FieldPath:
		return m.Path()
	case provider.FieldDetour:
		return m.Detour()
	case provider.FieldRemote:
		return m.Remote()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case provider.FieldName:
		return m.OldName(ctx)
	case provider.FieldPath:
		return m.OldPath(ctx)
	case provider.FieldDetour:
		return m.OldDetour(ctx)
	case provider.FieldRemote:
		return m.OldRemote(ctx)
	}
	return nil, fmt.Errorf("unknown Provider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case provider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case provider.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case provider.FieldDetour:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetour(v)
		return nil
	case provider.FieldRemote:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemote(v)
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProviderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProviderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Provider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProviderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(provider.FieldDetour) {
		fields = append(fields, provider.FieldDetour)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProviderMutation) ClearField(name string) error {
	switch name {
	case provider.FieldDetour:
		m.ClearDetour()
		return nil
	}
	return fmt.Errorf("unknown Provider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProviderMutation) ResetField(name string) error {
	switch name {
	case provider.FieldName:
		m.ResetName()
		return nil
	case provider.FieldPath:
		m.ResetPath()
		return nil
	case provider.FieldDetour:
		m.ResetDetour()
		return nil
	case provider.FieldRemote:
		m.ResetRemote()
		return nil
	}
	return fmt.Errorf("unknown Provider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Provider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Provider edge %s", name)
}

// RuleSetMutation represents an operation that mutates the RuleSet nodes in the graph.
type RuleSetMutation struct {
	config
	op              Op
	typ             string
	id              *int
	tag             *string
	_type           *string
	_path           *string
	format          *string
	label           *string
	download_detour *string
	update_interval *string
	outbound        *string
	china           *bool
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*RuleSet, error)
	predicates      []predicate.RuleSet
}

var _ ent.Mutation = (*RuleSetMutation)(nil)

// rulesetOption allows management of the mutation configuration using functional options.
type rulesetOption func(*RuleSetMutation)

// newRuleSetMutation creates new mutation for the RuleSet entity.
func newRuleSetMutation(c config, op Op, opts ...rulesetOption) *RuleSetMutation {
	m := &RuleSetMutation{
		config:        c,
		op:            op,
		typ:           TypeRuleSet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRuleSetID sets the ID field of the mutation.
func withRuleSetID(id int) rulesetOption {
	return func(m *RuleSetMutation) {
		var (
			err   error
			once  sync.Once
			value *RuleSet
		)
		m.oldValue = func(ctx context.Context) (*RuleSet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RuleSet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRuleSet sets the old RuleSet of the mutation.
func withRuleSet(node *RuleSet) rulesetOption {
	return func(m *RuleSetMutation) {
		m.oldValue = func(context.Context) (*RuleSet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RuleSetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RuleSetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RuleSetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RuleSetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RuleSet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTag sets the "tag" field.
func (m *RuleSetMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *RuleSetMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *RuleSetMutation) ResetTag() {
	m.tag = nil
}

// SetType sets the "type" field.
func (m *RuleSetMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *RuleSetMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RuleSetMutation) ResetType() {
	m._type = nil
}

// SetPath sets the "path" field.
func (m *RuleSetMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *RuleSetMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *RuleSetMutation) ResetPath() {
	m._path = nil
}

// SetFormat sets the "format" field.
func (m *RuleSetMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *RuleSetMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ResetFormat resets all changes to the "format" field.
func (m *RuleSetMutation) ResetFormat() {
	m.format = nil
}

// SetLabel sets the "label" field.
func (m *RuleSetMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *RuleSetMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *RuleSetMutation) ResetLabel() {
	m.label = nil
}

// SetDownloadDetour sets the "download_detour" field.
func (m *RuleSetMutation) SetDownloadDetour(s string) {
	m.download_detour = &s
}

// DownloadDetour returns the value of the "download_detour" field in the mutation.
func (m *RuleSetMutation) DownloadDetour() (r string, exists bool) {
	v := m.download_detour
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadDetour returns the old "download_detour" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldDownloadDetour(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadDetour is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadDetour requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadDetour: %w", err)
	}
	return oldValue.DownloadDetour, nil
}

// ResetDownloadDetour resets all changes to the "download_detour" field.
func (m *RuleSetMutation) ResetDownloadDetour() {
	m.download_detour = nil
}

// SetUpdateInterval sets the "update_interval" field.
func (m *RuleSetMutation) SetUpdateInterval(s string) {
	m.update_interval = &s
}

// UpdateInterval returns the value of the "update_interval" field in the mutation.
func (m *RuleSetMutation) UpdateInterval() (r string, exists bool) {
	v := m.update_interval
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateInterval returns the old "update_interval" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldUpdateInterval(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateInterval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateInterval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateInterval: %w", err)
	}
	return oldValue.UpdateInterval, nil
}

// ResetUpdateInterval resets all changes to the "update_interval" field.
func (m *RuleSetMutation) ResetUpdateInterval() {
	m.update_interval = nil
}

// SetOutbound sets the "outbound" field.
func (m *RuleSetMutation) SetOutbound(s string) {
	m.outbound = &s
}

// Outbound returns the value of the "outbound" field in the mutation.
func (m *RuleSetMutation) Outbound() (r string, exists bool) {
	v := m.outbound
	if v == nil {
		return
	}
	return *v, true
}

// OldOutbound returns the old "outbound" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldOutbound(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutbound is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutbound requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutbound: %w", err)
	}
	return oldValue.Outbound, nil
}

// ResetOutbound resets all changes to the "outbound" field.
func (m *RuleSetMutation) ResetOutbound() {
	m.outbound = nil
}

// SetChina sets the "china" field.
func (m *RuleSetMutation) SetChina(b bool) {
	m.china = &b
}

// China returns the value of the "china" field in the mutation.
func (m *RuleSetMutation) China() (r bool, exists bool) {
	v := m.china
	if v == nil {
		return
	}
	return *v, true
}

// OldChina returns the old "china" field's value of the RuleSet entity.
// If the RuleSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleSetMutation) OldChina(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChina is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChina requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChina: %w", err)
	}
	return oldValue.China, nil
}

// ResetChina resets all changes to the "china" field.
func (m *RuleSetMutation) ResetChina() {
	m.china = nil
}

// Where appends a list predicates to the RuleSetMutation builder.
func (m *RuleSetMutation) Where(ps ...predicate.RuleSet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RuleSetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RuleSetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RuleSet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RuleSetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RuleSetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RuleSet).
func (m *RuleSetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RuleSetMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.tag != nil {
		fields = append(fields, ruleset.FieldTag)
	}
	if m._type != nil {
		fields = append(fields, ruleset.FieldType)
	}
	if m._path != nil {
		fields = append(fields, ruleset.FieldPath)
	}
	if m.format != nil {
		fields = append(fields, ruleset.FieldFormat)
	}
	if m.label != nil {
		fields = append(fields, ruleset.FieldLabel)
	}
	if m.download_detour != nil {
		fields = append(fields, ruleset.FieldDownloadDetour)
	}
	if m.update_interval != nil {
		fields = append(fields, ruleset.FieldUpdateInterval)
	}
	if m.outbound != nil {
		fields = append(fields, ruleset.FieldOutbound)
	}
	if m.china != nil {
		fields = append(fields, ruleset.FieldChina)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RuleSetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ruleset.FieldTag:
		return m.Tag()
	case ruleset.FieldType:
		return m.GetType()
	case ruleset.FieldPath:
		return m.Path()
	case ruleset.FieldFormat:
		return m.Format()
	case ruleset.FieldLabel:
		return m.Label()
	case ruleset.FieldDownloadDetour:
		return m.DownloadDetour()
	case ruleset.FieldUpdateInterval:
		return m.UpdateInterval()
	case ruleset.FieldOutbound:
		return m.Outbound()
	case ruleset.FieldChina:
		return m.China()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RuleSetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ruleset.FieldTag:
		return m.OldTag(ctx)
	case ruleset.FieldType:
		return m.OldType(ctx)
	case ruleset.FieldPath:
		return m.OldPath(ctx)
	case ruleset.FieldFormat:
		return m.OldFormat(ctx)
	case ruleset.FieldLabel:
		return m.OldLabel(ctx)
	case ruleset.FieldDownloadDetour:
		return m.OldDownloadDetour(ctx)
	case ruleset.FieldUpdateInterval:
		return m.OldUpdateInterval(ctx)
	case ruleset.FieldOutbound:
		return m.OldOutbound(ctx)
	case ruleset.FieldChina:
		return m.OldChina(ctx)
	}
	return nil, fmt.Errorf("unknown RuleSet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleSetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ruleset.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case ruleset.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case ruleset.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case ruleset.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case ruleset.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case ruleset.FieldDownloadDetour:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadDetour(v)
		return nil
	case ruleset.FieldUpdateInterval:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateInterval(v)
		return nil
	case ruleset.FieldOutbound:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutbound(v)
		return nil
	case ruleset.FieldChina:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChina(v)
		return nil
	}
	return fmt.Errorf("unknown RuleSet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RuleSetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RuleSetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleSetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RuleSet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RuleSetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RuleSetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RuleSetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RuleSet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RuleSetMutation) ResetField(name string) error {
	switch name {
	case ruleset.FieldTag:
		m.ResetTag()
		return nil
	case ruleset.FieldType:
		m.ResetType()
		return nil
	case ruleset.FieldPath:
		m.ResetPath()
		return nil
	case ruleset.FieldFormat:
		m.ResetFormat()
		return nil
	case ruleset.FieldLabel:
		m.ResetLabel()
		return nil
	case ruleset.FieldDownloadDetour:
		m.ResetDownloadDetour()
		return nil
	case ruleset.FieldUpdateInterval:
		m.ResetUpdateInterval()
		return nil
	case ruleset.FieldOutbound:
		m.ResetOutbound()
		return nil
	case ruleset.FieldChina:
		m.ResetChina()
		return nil
	}
	return fmt.Errorf("unknown RuleSet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RuleSetMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RuleSetMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RuleSetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RuleSetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RuleSetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RuleSetMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RuleSetMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RuleSet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RuleSetMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RuleSet edge %s", name)
}
