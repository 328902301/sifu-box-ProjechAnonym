// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sifu-box/ent/ruleset"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleSetCreate is the builder for creating a RuleSet entity.
type RuleSetCreate struct {
	config
	mutation *RuleSetMutation
	hooks    []Hook
}

// SetTag sets the "tag" field.
func (rsc *RuleSetCreate) SetTag(s string) *RuleSetCreate {
	rsc.mutation.SetTag(s)
	return rsc
}

// SetType sets the "type" field.
func (rsc *RuleSetCreate) SetType(s string) *RuleSetCreate {
	rsc.mutation.SetType(s)
	return rsc
}

// SetPath sets the "path" field.
func (rsc *RuleSetCreate) SetPath(s string) *RuleSetCreate {
	rsc.mutation.SetPath(s)
	return rsc
}

// SetFormat sets the "format" field.
func (rsc *RuleSetCreate) SetFormat(s string) *RuleSetCreate {
	rsc.mutation.SetFormat(s)
	return rsc
}

// SetLabel sets the "label" field.
func (rsc *RuleSetCreate) SetLabel(s string) *RuleSetCreate {
	rsc.mutation.SetLabel(s)
	return rsc
}

// SetDownloadDetour sets the "download_detour" field.
func (rsc *RuleSetCreate) SetDownloadDetour(s string) *RuleSetCreate {
	rsc.mutation.SetDownloadDetour(s)
	return rsc
}

// SetUpdateInterval sets the "update_interval" field.
func (rsc *RuleSetCreate) SetUpdateInterval(s string) *RuleSetCreate {
	rsc.mutation.SetUpdateInterval(s)
	return rsc
}

// SetOutbound sets the "outbound" field.
func (rsc *RuleSetCreate) SetOutbound(s string) *RuleSetCreate {
	rsc.mutation.SetOutbound(s)
	return rsc
}

// SetChina sets the "china" field.
func (rsc *RuleSetCreate) SetChina(b bool) *RuleSetCreate {
	rsc.mutation.SetChina(b)
	return rsc
}

// Mutation returns the RuleSetMutation object of the builder.
func (rsc *RuleSetCreate) Mutation() *RuleSetMutation {
	return rsc.mutation
}

// Save creates the RuleSet in the database.
func (rsc *RuleSetCreate) Save(ctx context.Context) (*RuleSet, error) {
	return withHooks(ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *RuleSetCreate) SaveX(ctx context.Context) *RuleSet {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *RuleSetCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *RuleSetCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *RuleSetCreate) check() error {
	if _, ok := rsc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "RuleSet.tag"`)}
	}
	if v, ok := rsc.mutation.Tag(); ok {
		if err := ruleset.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "RuleSet.tag": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "RuleSet.type"`)}
	}
	if v, ok := rsc.mutation.GetType(); ok {
		if err := ruleset.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RuleSet.type": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "RuleSet.path"`)}
	}
	if v, ok := rsc.mutation.Path(); ok {
		if err := ruleset.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "RuleSet.path": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`ent: missing required field "RuleSet.format"`)}
	}
	if v, ok := rsc.mutation.Format(); ok {
		if err := ruleset.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "RuleSet.format": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "RuleSet.label"`)}
	}
	if v, ok := rsc.mutation.Label(); ok {
		if err := ruleset.LabelValidator(v); err != nil {
			return &ValidationError{Name: "label", err: fmt.Errorf(`ent: validator failed for field "RuleSet.label": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.DownloadDetour(); !ok {
		return &ValidationError{Name: "download_detour", err: errors.New(`ent: missing required field "RuleSet.download_detour"`)}
	}
	if v, ok := rsc.mutation.DownloadDetour(); ok {
		if err := ruleset.DownloadDetourValidator(v); err != nil {
			return &ValidationError{Name: "download_detour", err: fmt.Errorf(`ent: validator failed for field "RuleSet.download_detour": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.UpdateInterval(); !ok {
		return &ValidationError{Name: "update_interval", err: errors.New(`ent: missing required field "RuleSet.update_interval"`)}
	}
	if v, ok := rsc.mutation.UpdateInterval(); ok {
		if err := ruleset.UpdateIntervalValidator(v); err != nil {
			return &ValidationError{Name: "update_interval", err: fmt.Errorf(`ent: validator failed for field "RuleSet.update_interval": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.Outbound(); !ok {
		return &ValidationError{Name: "outbound", err: errors.New(`ent: missing required field "RuleSet.outbound"`)}
	}
	if v, ok := rsc.mutation.Outbound(); ok {
		if err := ruleset.OutboundValidator(v); err != nil {
			return &ValidationError{Name: "outbound", err: fmt.Errorf(`ent: validator failed for field "RuleSet.outbound": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.China(); !ok {
		return &ValidationError{Name: "china", err: errors.New(`ent: missing required field "RuleSet.china"`)}
	}
	return nil
}

func (rsc *RuleSetCreate) sqlSave(ctx context.Context) (*RuleSet, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *RuleSetCreate) createSpec() (*RuleSet, *sqlgraph.CreateSpec) {
	var (
		_node = &RuleSet{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(ruleset.Table, sqlgraph.NewFieldSpec(ruleset.FieldID, field.TypeInt))
	)
	if value, ok := rsc.mutation.Tag(); ok {
		_spec.SetField(ruleset.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := rsc.mutation.GetType(); ok {
		_spec.SetField(ruleset.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rsc.mutation.Path(); ok {
		_spec.SetField(ruleset.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := rsc.mutation.Format(); ok {
		_spec.SetField(ruleset.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := rsc.mutation.Label(); ok {
		_spec.SetField(ruleset.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := rsc.mutation.DownloadDetour(); ok {
		_spec.SetField(ruleset.FieldDownloadDetour, field.TypeString, value)
		_node.DownloadDetour = value
	}
	if value, ok := rsc.mutation.UpdateInterval(); ok {
		_spec.SetField(ruleset.FieldUpdateInterval, field.TypeString, value)
		_node.UpdateInterval = value
	}
	if value, ok := rsc.mutation.Outbound(); ok {
		_spec.SetField(ruleset.FieldOutbound, field.TypeString, value)
		_node.Outbound = value
	}
	if value, ok := rsc.mutation.China(); ok {
		_spec.SetField(ruleset.FieldChina, field.TypeBool, value)
		_node.China = value
	}
	return _node, _spec
}

// RuleSetCreateBulk is the builder for creating many RuleSet entities in bulk.
type RuleSetCreateBulk struct {
	config
	err      error
	builders []*RuleSetCreate
}

// Save creates the RuleSet entities in the database.
func (rscb *RuleSetCreateBulk) Save(ctx context.Context) ([]*RuleSet, error) {
	if rscb.err != nil {
		return nil, rscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*RuleSet, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RuleSetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *RuleSetCreateBulk) SaveX(ctx context.Context) []*RuleSet {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *RuleSetCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *RuleSetCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}
