// Code generated by ent, DO NOT EDIT.

package ruleset

import (
	"sifu-box/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldID, id))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldTag, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldType, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldPath, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldFormat, v))
}

// DownloadDetour applies equality check predicate on the "download_detour" field. It's identical to DownloadDetourEQ.
func DownloadDetour(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldDownloadDetour, v))
}

// UpdateInterval applies equality check predicate on the "update_interval" field. It's identical to UpdateIntervalEQ.
func UpdateInterval(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldUpdateInterval, v))
}

// Outbound applies equality check predicate on the "outbound" field. It's identical to OutboundEQ.
func Outbound(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldOutbound, v))
}

// China applies equality check predicate on the "china" field. It's identical to ChinaEQ.
func China(v bool) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldChina, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldTag, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldType, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldPath, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldFormat, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldLabel, v))
}

// DownloadDetourEQ applies the EQ predicate on the "download_detour" field.
func DownloadDetourEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldDownloadDetour, v))
}

// DownloadDetourNEQ applies the NEQ predicate on the "download_detour" field.
func DownloadDetourNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldDownloadDetour, v))
}

// DownloadDetourIn applies the In predicate on the "download_detour" field.
func DownloadDetourIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldDownloadDetour, vs...))
}

// DownloadDetourNotIn applies the NotIn predicate on the "download_detour" field.
func DownloadDetourNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldDownloadDetour, vs...))
}

// DownloadDetourGT applies the GT predicate on the "download_detour" field.
func DownloadDetourGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldDownloadDetour, v))
}

// DownloadDetourGTE applies the GTE predicate on the "download_detour" field.
func DownloadDetourGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldDownloadDetour, v))
}

// DownloadDetourLT applies the LT predicate on the "download_detour" field.
func DownloadDetourLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldDownloadDetour, v))
}

// DownloadDetourLTE applies the LTE predicate on the "download_detour" field.
func DownloadDetourLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldDownloadDetour, v))
}

// DownloadDetourContains applies the Contains predicate on the "download_detour" field.
func DownloadDetourContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldDownloadDetour, v))
}

// DownloadDetourHasPrefix applies the HasPrefix predicate on the "download_detour" field.
func DownloadDetourHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldDownloadDetour, v))
}

// DownloadDetourHasSuffix applies the HasSuffix predicate on the "download_detour" field.
func DownloadDetourHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldDownloadDetour, v))
}

// DownloadDetourEqualFold applies the EqualFold predicate on the "download_detour" field.
func DownloadDetourEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldDownloadDetour, v))
}

// DownloadDetourContainsFold applies the ContainsFold predicate on the "download_detour" field.
func DownloadDetourContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldDownloadDetour, v))
}

// UpdateIntervalEQ applies the EQ predicate on the "update_interval" field.
func UpdateIntervalEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldUpdateInterval, v))
}

// UpdateIntervalNEQ applies the NEQ predicate on the "update_interval" field.
func UpdateIntervalNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldUpdateInterval, v))
}

// UpdateIntervalIn applies the In predicate on the "update_interval" field.
func UpdateIntervalIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldUpdateInterval, vs...))
}

// UpdateIntervalNotIn applies the NotIn predicate on the "update_interval" field.
func UpdateIntervalNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldUpdateInterval, vs...))
}

// UpdateIntervalGT applies the GT predicate on the "update_interval" field.
func UpdateIntervalGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldUpdateInterval, v))
}

// UpdateIntervalGTE applies the GTE predicate on the "update_interval" field.
func UpdateIntervalGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldUpdateInterval, v))
}

// UpdateIntervalLT applies the LT predicate on the "update_interval" field.
func UpdateIntervalLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldUpdateInterval, v))
}

// UpdateIntervalLTE applies the LTE predicate on the "update_interval" field.
func UpdateIntervalLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldUpdateInterval, v))
}

// UpdateIntervalContains applies the Contains predicate on the "update_interval" field.
func UpdateIntervalContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldUpdateInterval, v))
}

// UpdateIntervalHasPrefix applies the HasPrefix predicate on the "update_interval" field.
func UpdateIntervalHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldUpdateInterval, v))
}

// UpdateIntervalHasSuffix applies the HasSuffix predicate on the "update_interval" field.
func UpdateIntervalHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldUpdateInterval, v))
}

// UpdateIntervalEqualFold applies the EqualFold predicate on the "update_interval" field.
func UpdateIntervalEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldUpdateInterval, v))
}

// UpdateIntervalContainsFold applies the ContainsFold predicate on the "update_interval" field.
func UpdateIntervalContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldUpdateInterval, v))
}

// OutboundEQ applies the EQ predicate on the "outbound" field.
func OutboundEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldOutbound, v))
}

// OutboundNEQ applies the NEQ predicate on the "outbound" field.
func OutboundNEQ(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldOutbound, v))
}

// OutboundIn applies the In predicate on the "outbound" field.
func OutboundIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldIn(FieldOutbound, vs...))
}

// OutboundNotIn applies the NotIn predicate on the "outbound" field.
func OutboundNotIn(vs ...string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNotIn(FieldOutbound, vs...))
}

// OutboundGT applies the GT predicate on the "outbound" field.
func OutboundGT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGT(FieldOutbound, v))
}

// OutboundGTE applies the GTE predicate on the "outbound" field.
func OutboundGTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldGTE(FieldOutbound, v))
}

// OutboundLT applies the LT predicate on the "outbound" field.
func OutboundLT(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLT(FieldOutbound, v))
}

// OutboundLTE applies the LTE predicate on the "outbound" field.
func OutboundLTE(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldLTE(FieldOutbound, v))
}

// OutboundContains applies the Contains predicate on the "outbound" field.
func OutboundContains(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContains(FieldOutbound, v))
}

// OutboundHasPrefix applies the HasPrefix predicate on the "outbound" field.
func OutboundHasPrefix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasPrefix(FieldOutbound, v))
}

// OutboundHasSuffix applies the HasSuffix predicate on the "outbound" field.
func OutboundHasSuffix(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldHasSuffix(FieldOutbound, v))
}

// OutboundEqualFold applies the EqualFold predicate on the "outbound" field.
func OutboundEqualFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEqualFold(FieldOutbound, v))
}

// OutboundContainsFold applies the ContainsFold predicate on the "outbound" field.
func OutboundContainsFold(v string) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldContainsFold(FieldOutbound, v))
}

// ChinaEQ applies the EQ predicate on the "china" field.
func ChinaEQ(v bool) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldEQ(FieldChina, v))
}

// ChinaNEQ applies the NEQ predicate on the "china" field.
func ChinaNEQ(v bool) predicate.RuleSet {
	return predicate.RuleSet(sql.FieldNEQ(FieldChina, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RuleSet) predicate.RuleSet {
	return predicate.RuleSet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RuleSet) predicate.RuleSet {
	return predicate.RuleSet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RuleSet) predicate.RuleSet {
	return predicate.RuleSet(sql.NotPredicates(p))
}
